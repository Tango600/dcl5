/******************************************************************************/
/***         Generated by IBExpert 2013.5.24.1 16.07.2013 11:45:39          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_DCL_ACTIVE_USERS_ID;
SET GENERATOR GEN_DCL_ACTIVE_USERS_ID TO 0;

CREATE GENERATOR GEN_DCL_USER_LOGIN_HISTORY_ID;
SET GENERATOR GEN_DCL_USER_LOGIN_HISTORY_ID TO 0;

CREATE GENERATOR GEN_INI_PROFILES_ID;
SET GENERATOR GEN_INI_PROFILES_ID TO 0;

CREATE GENERATOR MAIN_GENERATOR;
SET GENERATOR MAIN_GENERATOR TO 0;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE OR ALTER PROCEDURE ADD_MENU_ITEM_TO_ROLE (
    ROLEID INTEGER,
    MENUITEMID INTEGER)
RETURNS (
    ISAPPEND INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE COPY_ROLE (
    ROLEIDFROM INTEGER,
    ROLEIDTO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE DEL_ROLE_AND_MENU (
    ROLEID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE DEL_ROLE_MENU (
    ROLEID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE ROLESMENU_IS_CORRECT
RETURNS (
    NUMSEQ INTEGER,
    DCLNAME CHAR(50) CHARACTER SET WIN1251,
    IDENT INTEGER,
    ROLE_ID INTEGER,
    ROLE_NAME VARCHAR(50) CHARACTER SET WIN1251)
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE DCL_ACTIVE_USERS (
    AU_ID                   INTEGER NOT NULL,
    ACTIVE_USER_ID          INTEGER,
    ACTIVE_USER_HOST        VARCHAR(50) CHARACTER SET WIN1251,
    ACTIVE_USER_IP          VARCHAR(15) CHARACTER SET WIN1251,
    ACTIVE_USER_DCL_VER     VARCHAR(12) CHARACTER SET WIN1251,
    ACTIVE_USER_LOGIN_TIME  TIMESTAMP
);

CREATE TABLE DCL_GLOBAL_PARAMS (
    PARAM_ID        INTEGER NOT NULL,
    PARAM_CAPT      VARCHAR(70) CHARACTER SET WIN1251,
    PARAM_NAME      VARCHAR(70) CHARACTER SET WIN1251 NOT NULL,
    PARAM_VALUE     VARCHAR(255) CHARACTER SET WIN1251,
    PARAM_USERID    INTEGER,
    PROGRAMM_PARAM  SMALLINT
);

CREATE TABLE DCL_INI_PROFILES (
    INI_ID           INTEGER NOT NULL,
    INI_USER_ID      INTEGER,
    INI_DIALOG_NAME  VARCHAR(50) CHARACTER SET WIN1251,
    INI_PARAM_VALUE  VARCHAR(1100) CHARACTER SET WIN1251
);

CREATE TABLE DCL_NOTIFYCATIONS (
    NOTIFY_ID      INTEGER NOT NULL,
    NOTIFY_TIME    TIMESTAMP,
    NOTIFY_ACTION  INTEGER,
    NOTIFY_STATE   INTEGER DEFAULT 0,
    USER_ID        INTEGER,
    NOTIFY_TEXT    VARCHAR(255) CHARACTER SET WIN1251,
    ADD_DATE       TIMESTAMP
);

CREATE TABLE DCL_ROLES (
    ROLESID       INTEGER NOT NULL,
    ROLENAME      VARCHAR(20) CHARACTER SET WIN1251,
    LONGROLENAME  VARCHAR(30) CHARACTER SET WIN1251,
    SHOWINLIST    SMALLINT,
    ROLEADMIN     SMALLINT
);

CREATE TABLE DCL_ROLESMENU (
    ROLEID      INTEGER NOT NULL,
    MENUITEMID  INTEGER,
    RM_ID       INTEGER NOT NULL
);

CREATE TABLE DCL_SCRIPTS (
    NUMSEQ   INTEGER NOT NULL,
    DCLNAME  CHAR(50) CHARACTER SET WIN1251,
    DCLTEXT  BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET WIN1251,
    COMMAND  CHAR(80) CHARACTER SET WIN1251,
    IDENT    INTEGER,
    PARENT   INTEGER,
    UPDATES  TIMESTAMP,
    ACTINON  CHAR(1) CHARACTER SET WIN1251
);

CREATE TABLE DCL_USER_LOGIN_HISTORY (
    UL_ID           INTEGER NOT NULL,
    UL_USER_ID      INTEGER,
    UL_LOGIN_TIME   TIMESTAMP,
    UL_LOGOFF_TIME  TIMESTAMP,
    UL_HOST_NAME    VARCHAR(50) CHARACTER SET WIN1251,
    UL_HOST_IP      VARCHAR(15) CHARACTER SET WIN1251,
    UL_DCL_VER      VARCHAR(12) CHARACTER SET WIN1251
);

CREATE TABLE DCL_USERS (
    UID                 INTEGER NOT NULL,
    DCL_USER_NAME       VARCHAR(20),
    DCL_LONG_USER_NAME  VARCHAR(30),
    DCL_USER_PASS       VARCHAR(32),
    DCL_ROLE            INTEGER,
    SHOWINLIST          SMALLINT,
    ACCESSLEVEL         SMALLINT,
    DBUSER_NAME         VARCHAR(300),
    DBPASS              VARCHAR(25)
);

CREATE TABLE ORGANIZATIONS (
    OID       INTEGER NOT NULL,
    ORG_NAME  VARCHAR(101),
    ORD       SMALLINT,
    MAINORG   SMALLINT
);

CREATE TABLE DEPARTMENTS (
    ID_DEP   INTEGER NOT NULL,
    DEPNAME  VARCHAR(40) CHARACTER SET WIN1251
);

CREATE TABLE EMPLOYERS (
    EMPID      INTEGER NOT NULL,
    EMPLNAME   VARCHAR(30) CHARACTER SET WIN1251,
    EMPLFNAME  VARCHAR(40) CHARACTER SET WIN1251,
    EMPLTNAME  VARCHAR(40) CHARACTER SET WIN1251,
    PHONE      VARCHAR(10) CHARACTER SET WIN1251,
    MOBPHONE   VARCHAR(10) CHARACTER SET WIN1251,
    ITNPHONE   VARCHAR(4) CHARACTER SET WIN1251
);

CREATE TABLE FILIAL (
    ID_FL   INTEGER NOT NULL,
    FLNAME  VARCHAR(40) CHARACTER SET WIN1251,
    MAIL    VARCHAR(40) CHARACTER SET WIN1251
);

CREATE TABLE HARDWARE (
    HWID          INTEGER NOT NULL,
    HW_TYPE       INTEGER,
    HW_NAME       VARCHAR(40) CHARACTER SET WIN1251,
    HW_TTH        BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET WIN1251,
    INVNO         VARCHAR(20) CHARACTER SET WIN1251,
    SERIALNUM     VARCHAR(40) CHARACTER SET WIN1251,
    NETNAME       VARCHAR(40) CHARACTER SET WIN1251,
    IP            VARCHAR(15) CHARACTER SET WIN1251,
    VENDNUM       INTEGER,
    COAST         DOUBLE PRECISION,
    BUYDATE       DATE,
    GUARANTEE     SMALLINT,
    ENDGUARANTEE  DATE,
    FLID          INTEGER,
    DEPID         INTEGER,
    EMPLID        INTEGER,
    STATE         INTEGER,
    DOCPATH       VARCHAR(240) CHARACTER SET WIN1251,
    NOTES         BLOB SUB_TYPE 1 SEGMENT SIZE 80 CHARACTER SET WIN1251,
    UPDDATE       TIMESTAMP
);

CREATE TABLE HW_TYPES (
    ID_HWT       INTEGER NOT NULL,
    HW_TYPENAME  VARCHAR(40) CHARACTER SET WIN1251
);

CREATE TABLE REPAIR_TYPE (
    REPAIR_TYPE_ID  INTEGER NOT NULL,
    REPAIRTYPE      VARCHAR(40) CHARACTER SET WIN1251
);

CREATE TABLE REPAIRS (
    REP_ID       INTEGER NOT NULL,
    REPAIRDESC   VARCHAR(50) CHARACTER SET WIN1251,
    REPAIRDATE   DATE,
    REPAIRPRICE  DOUBLE PRECISION,
    REPAIRTYPE   INTEGER,
    REP_HW_ID    INTEGER
);

CREATE TABLE SOFTWARE (
    SOFT_ID       INTEGER NOT NULL,
    SOFTWARENAME  VARCHAR(50) CHARACTER SET WIN1251,
    COASTSOFT     DOUBLE PRECISION,
    SOFT_HW_ID    INTEGER
);

CREATE TABLE STATE (
    STATEID    INTEGER NOT NULL,
    STATENAME  VARCHAR(30) CHARACTER SET WIN1251
);

CREATE TABLE VENDORS (
    ID_VENDOR   INTEGER NOT NULL,
    VENDORNAME  VARCHAR(40) CHARACTER SET WIN1251
);


SET BLOBFILE 'Comp.lob';

INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (1, 'Comps', :h0_93C, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (2, 'Справочники', NULL, NULL, 10, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (3, 'Компьютеры', NULL, 'Comps', 1010, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (58, '-', NULL, NULL, 1115, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (4, '', NULL, NULL, 20001, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (47, 'Repais', :h93C_115, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (5, 'Учёт компьютеров v.1.0', NULL, NULL, 0, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (6, 'Filials', :hA51_160, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (8, 'Vendors', :hBB1_15E, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (9, 'HW_Types', :hD0F_15A, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (14, 'Deps', :hE69_157, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (51, 'Comp_Edit_Rep_Scr', :hFC0_1A, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (40, 'Версия', :hFDA_8, '', 900, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (41, 'Филиалы', NULL, 'Filials', 1100, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (42, '-', NULL, '', 1020, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (53, 'Repairs_Types', :hFE2_148, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (54, 'Типы ремонтов', NULL, 'Repairs_Types', 1142, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (21, 'Empls', :h112A_1B6, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (22, 'Сотрудники', NULL, 'Empls', 1112, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (23, 'Подразделения', NULL, 'Deps', 1111, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (24, 'Поставщики', NULL, 'Vendors', 1121, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (25, 'Типы техники', NULL, 'HW_Types', 1143, 10, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (26, 'States', :h12E0_120, NULL, NULL, NULL, NULL, NULL);
INSERT INTO DCL_SCRIPTS (NUMSEQ, DCLNAME, DCLTEXT, COMMAND, IDENT, PARENT, UPDATES, ACTINON) VALUES (27, 'Статусы', NULL, 'States', 1141, 10, NULL, NULL);

COMMIT WORK;

INSERT INTO HW_TYPES (ID_HWT, HW_TYPENAME) VALUES (10, 'Комплектующие');
INSERT INTO HW_TYPES (ID_HWT, HW_TYPENAME) VALUES (11, 'Принтеры');
INSERT INTO HW_TYPES (ID_HWT, HW_TYPENAME) VALUES (12, 'Сканеры');
INSERT INTO HW_TYPES (ID_HWT, HW_TYPENAME) VALUES (13, 'Телефоны');
INSERT INTO HW_TYPES (ID_HWT, HW_TYPENAME) VALUES (37, 'Компьютеры настольные');
INSERT INTO HW_TYPES (ID_HWT, HW_TYPENAME) VALUES (38, 'Ноутбуки');

COMMIT WORK;

INSERT INTO REPAIR_TYPE (REPAIR_TYPE_ID, REPAIRTYPE) VALUES (48, 'Замена');
INSERT INTO REPAIR_TYPE (REPAIR_TYPE_ID, REPAIRTYPE) VALUES (49, 'Заправка картриджа');
INSERT INTO REPAIR_TYPE (REPAIR_TYPE_ID, REPAIRTYPE) VALUES (50, 'Диагностика');
INSERT INTO REPAIR_TYPE (REPAIR_TYPE_ID, REPAIRTYPE) VALUES (55, 'Замена комплектующих');

COMMIT WORK;

INSERT INTO STATE (STATEID, STATENAME) VALUES (28, 'Используется часто');
INSERT INTO STATE (STATEID, STATENAME) VALUES (29, 'Используется редко');
INSERT INTO STATE (STATEID, STATENAME) VALUES (35, 'Не используется');
INSERT INTO STATE (STATEID, STATENAME) VALUES (39, 'Всегда используется');

COMMIT WORK;



/******************************************************************************/
/***                           Unique Constraints                           ***/
/******************************************************************************/

ALTER TABLE DCL_GLOBAL_PARAMS ADD CONSTRAINT UNQ1_DCL_GLOBAL_PARAMS UNIQUE (PARAM_NAME);
ALTER TABLE DCL_SCRIPTS ADD CONSTRAINT UNQ1_DCL_SCRIPTS UNIQUE (IDENT);


/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE DCL_ACTIVE_USERS ADD CONSTRAINT PK_DCL_ACTIVE_USERS PRIMARY KEY (AU_ID);
ALTER TABLE DCL_INI_PROFILES ADD CONSTRAINT PK_INI_PROFILES PRIMARY KEY (INI_ID);
ALTER TABLE DCL_NOTIFYCATIONS ADD CONSTRAINT PK_DCL_NOTIFYCATIONS PRIMARY KEY (NOTIFY_ID);
ALTER TABLE DCL_ROLES ADD CONSTRAINT PK_DCL_ROLES PRIMARY KEY (ROLESID);
ALTER TABLE DCL_ROLESMENU ADD CONSTRAINT PK_DCL_ROLESMENU PRIMARY KEY (RM_ID);
ALTER TABLE DCL_SCRIPTS ADD CONSTRAINT PK_DCL_SCRIPTS PRIMARY KEY (NUMSEQ);
ALTER TABLE DCL_USERS ADD CONSTRAINT PK_DCL_USERS PRIMARY KEY (UID);
ALTER TABLE DCL_USER_LOGIN_HISTORY ADD CONSTRAINT PK_DCL_USER_LOGIN_HISTORY PRIMARY KEY (UL_ID);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT PK_DEPARTMENTS PRIMARY KEY (ID_DEP);
ALTER TABLE EMPLOYERS ADD CONSTRAINT PK_EMPLOYERS PRIMARY KEY (EMPID);
ALTER TABLE FILIAL ADD CONSTRAINT PK_FILIAL PRIMARY KEY (ID_FL);
ALTER TABLE HARDWARE ADD CONSTRAINT PK_HARDWARE PRIMARY KEY (HWID);
ALTER TABLE HW_TYPES ADD CONSTRAINT PK_HW_TYPES PRIMARY KEY (ID_HWT);
ALTER TABLE REPAIRS ADD CONSTRAINT PK_REPAIRS PRIMARY KEY (REP_ID);
ALTER TABLE REPAIR_TYPE ADD CONSTRAINT PK_REPAIR_TYPE PRIMARY KEY (REPAIR_TYPE_ID);
ALTER TABLE SOFTWARE ADD CONSTRAINT PK_SOFTWARE PRIMARY KEY (SOFT_ID);
ALTER TABLE STATE ADD CONSTRAINT PK_STATE PRIMARY KEY (STATEID);
ALTER TABLE VENDORS ADD CONSTRAINT PK_VENDORS PRIMARY KEY (ID_VENDOR);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE DCL_NOTIFYCATIONS ADD CONSTRAINT FK_DCL_NOTIFYCATIONS_1 FOREIGN KEY (USER_ID) REFERENCES DCL_USERS (UID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX DCL_ROLESMENU_IDX1 ON DCL_ROLESMENU (ROLEID, MENUITEMID);
CREATE INDEX DCL_SCRIPTS_IDX2 ON DCL_SCRIPTS (DCLNAME);
CREATE UNIQUE INDEX DCL_SCRIPTS_IDX3 ON DCL_SCRIPTS (IDENT, PARENT);
CREATE UNIQUE INDEX "Departments0" ON DEPARTMENTS (ID_DEP);
CREATE UNIQUE INDEX "Employers0" ON EMPLOYERS (EMPID);
CREATE UNIQUE INDEX "Filial0" ON FILIAL (ID_FL);
CREATE UNIQUE INDEX "Hardware0" ON HARDWARE (HWID);
CREATE UNIQUE INDEX "HW_Types0" ON HW_TYPES (ID_HWT);
CREATE UNIQUE INDEX "Repairs0" ON REPAIRS (REP_ID);
CREATE UNIQUE INDEX "Software0" ON SOFTWARE (SOFT_ID);
CREATE UNIQUE INDEX "State0" ON STATE (STATEID);
CREATE UNIQUE INDEX "Vendors0" ON VENDORS (ID_VENDOR);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: DCL_ACTIVE_USERS_BI */
CREATE OR ALTER TRIGGER DCL_ACTIVE_USERS_BI FOR DCL_ACTIVE_USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.au_id is null) then
    new.au_id = gen_id(gen_dcl_active_users_id,1);
  if (inserting) then
    if (new.active_user_login_time is null) then
      new.active_user_login_time='now';
end
^

/* Trigger: DCL_USER_LOGIN_HISTORY_BI */
CREATE OR ALTER TRIGGER DCL_USER_LOGIN_HISTORY_BI FOR DCL_USER_LOGIN_HISTORY
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.ul_id is null) then
    new.ul_id = gen_id(gen_dcl_user_login_history_id,1);
end
^

/* Trigger: DEPARTMENTS_BI */
CREATE OR ALTER TRIGGER DEPARTMENTS_BI FOR DEPARTMENTS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_DEP IS NULL) THEN
    NEW.ID_DEP = GEN_ID(MAIN_GENERATOR,1);
END
^

/* Trigger: EMPLOYERS_BI */
CREATE OR ALTER TRIGGER EMPLOYERS_BI FOR EMPLOYERS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.EMPID IS NULL) THEN
    NEW.EMPID = GEN_ID(MAIN_GENERATOR,1);
END
^

/* Trigger: FILIAL_BI */
CREATE OR ALTER TRIGGER FILIAL_BI FOR FILIAL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_FL IS NULL) THEN
    NEW.ID_FL = GEN_ID(MAIN_GENERATOR,1);
END
^

/* Trigger: HARDWARE_BI */
CREATE OR ALTER TRIGGER HARDWARE_BI FOR HARDWARE
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
BEGIN
  IF (NEW.HWID IS NULL) THEN
    NEW.HWID = GEN_ID(MAIN_GENERATOR,1);
  new.upddate='now';
END
^

/* Trigger: HW_TYPES_BI */
CREATE OR ALTER TRIGGER HW_TYPES_BI FOR HW_TYPES
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_HWT IS NULL) THEN
    NEW.ID_HWT = GEN_ID(MAIN_GENERATOR,1);
END
^

/* Trigger: INI_PROFILES_BI */
CREATE OR ALTER TRIGGER INI_PROFILES_BI FOR DCL_INI_PROFILES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.ini_id is null) then
    new.ini_id = gen_id(gen_ini_profiles_id,1);
end
^

/* Trigger: REPAIRS_BI */
CREATE OR ALTER TRIGGER REPAIRS_BI FOR REPAIRS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.REP_ID IS NULL) THEN
    NEW.REP_ID = GEN_ID(MAIN_GENERATOR,1);
END
^

/* Trigger: REPAIR_TYPE_BI */
CREATE OR ALTER TRIGGER REPAIR_TYPE_BI FOR REPAIR_TYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.repair_type_id is null) then
    new.repair_type_id = gen_id(main_generator,1);
end
^

/* Trigger: SOFTWARE_BI */
CREATE OR ALTER TRIGGER SOFTWARE_BI FOR SOFTWARE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.SOFT_ID IS NULL) THEN
    NEW.SOFT_ID = GEN_ID(MAIN_GENERATOR,1);
END
^

/* Trigger: STATE_BI */
CREATE OR ALTER TRIGGER STATE_BI FOR STATE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.STATEID IS NULL) THEN
    NEW.STATEID = GEN_ID(MAIN_GENERATOR,1);
END
^

/* Trigger: VENDORS_BI */
CREATE OR ALTER TRIGGER VENDORS_BI FOR VENDORS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_VENDOR IS NULL) THEN
    NEW.ID_VENDOR = GEN_ID(MAIN_GENERATOR,1);
END
^

SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE ADD_MENU_ITEM_TO_ROLE (
    ROLEID INTEGER,
    MENUITEMID INTEGER)
RETURNS (
    ISAPPEND INTEGER)
AS
declare variable TMP1 integer;
begin
  select count(R.ROLEID)
  from DCL_ROLESMENU R
  where R.ROLEID = :ROLEID and
        R.MENUITEMID = :MENUITEMID
  into TMP1;
  if (:TMP1 = 0) then
  begin
    insert into DCL_ROLESMENU (ROLEID, MENUITEMID)
    values (:ROLEID, :MENUITEMID);
    ISAPPEND = 1;
    suspend;
  end
  else
  begin
    ISAPPEND = 0;
    suspend;
  end
end^


CREATE OR ALTER PROCEDURE COPY_ROLE (
    ROLEIDFROM INTEGER,
    ROLEIDTO INTEGER)
AS
begin
  insert into DCL_ROLESMENU(ROLEID, MENUITEMID)
  select :ROLEIDTO, MENUITEMID
  from DCL_ROLESMENU R
  where R.ROLEID = :ROLEIDFROM;
end^


CREATE OR ALTER PROCEDURE DEL_ROLE_AND_MENU (
    ROLEID INTEGER)
AS
begin
  delete from DCL_rolesmenu r where r.roleid=:roleid and r.roleid not in (select u1.dcl_role from dcl_users u1);
  Delete from DCL_roles r where r.rolesid=:roleid and r.rolesid not in (select u1.dcl_role from dcl_users u1);
end^


CREATE OR ALTER PROCEDURE DEL_ROLE_MENU (
    ROLEID INTEGER)
AS
begin
    delete from DCL_rolesmenu r where r.roleid=:roleid and r.roleid not in (select u1.dcl_role from dcl_users u1);
end^


CREATE OR ALTER PROCEDURE ROLESMENU_IS_CORRECT
RETURNS (
    NUMSEQ INTEGER,
    DCLNAME CHAR(50) CHARACTER SET WIN1251,
    IDENT INTEGER,
    ROLE_ID INTEGER,
    ROLE_NAME VARCHAR(50) CHARACTER SET WIN1251)
AS
declare variable HEAD_EXISTS integer;
declare variable PARENT integer;
begin
  for select R.ROLESID, R.LONGROLENAME
      from DCL_ROLES R
      order by R.LONGROLENAME
      into :ROLE_ID, :ROLE_NAME
  do
    for select D.NUMSEQ, D.IDENT, D.PARENT
        from DCL_ROLESMENU RM, DCL_ROLES R, DCL_SCRIPTS D
        where R.ROLESID = RM.ROLEID and
              RM.MENUITEMID = D.NUMSEQ and
              R.ROLESID = :ROLE_ID
        into :NUMSEQ, :IDENT, :PARENT
    do
    begin
      select count(*)
      from DCL_ROLESMENU RM, DCL_ROLES R, DCL_SCRIPTS D
      where R.ROLESID = RM.ROLEID and
            RM.MENUITEMID = D.NUMSEQ and
            D.IDENT = :PARENT and
            R.ROLESID = :ROLE_ID
      into :HEAD_EXISTS;
      if (:HEAD_EXISTS = 0) then
      begin
        for select S.NUMSEQ, S.DCLNAME, S.IDENT
            from DCL_SCRIPTS S
            where S.IDENT = :PARENT
            into :NUMSEQ, :DCLNAME, :IDENT
        do
          suspend;
      end
    end
end^



SET TERM ; ^


/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

DESCRIBE TABLE DCL_GLOBAL_PARAMS
'Параметры запуска системы';

DESCRIBE TABLE DCL_ROLESMENU
'Меню ролей';

DESCRIBE TABLE DCL_SCRIPTS
'Скрипты';



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

DESCRIBE FIELD ROLEID TABLE DCL_ROLESMENU
'ID роли';

DESCRIBE FIELD MENUITEMID TABLE DCL_ROLESMENU
'ID элемента меню к роли';


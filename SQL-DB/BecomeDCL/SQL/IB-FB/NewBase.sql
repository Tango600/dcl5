/******************************************************************************/
/*                 Generated by IBExpert 07.12.2015 10:44:28                  */
/******************************************************************************/

/******************************************************************************/
/*        Following SET SQL DIALECT is just for the Database Comparer         */
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/*                                  Domains                                   */
/******************************************************************************/

CREATE DOMAIN DM_PASSWORD AS
VARCHAR(35);



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR DCL_SCRIPTS_NEXT_ID;
CREATE GENERATOR GEN_DCL_ACTIVE_USERS_ID;
CREATE GENERATOR GEN_DCL_USER_LOGIN_HISTORY_ID;
CREATE GENERATOR GEN_INI_PROFILES_ID;
CREATE GENERATOR MAIN_GENERATOR_ID;


SET TERM ^ ; 



/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/

CREATE OR ALTER PROCEDURE ADD_MENU_ITEM_TO_ROLE (
    ROLEID INTEGER,
    MENUITEMID INTEGER)
RETURNS (
    ISAPPEND INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE COPY_ROLE (
    ROLEIDFROM INTEGER,
    ROLEIDTO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE DEL_ROLE_AND_MENU (
    ROLEID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE DEL_ROLE_MENU (
    ROLEID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE FIRST_DAY_OF_MONTH (
    ADATE DATE)
RETURNS (
    RESULT DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE IS_NUMBER (
    A_VALUE VARCHAR(32))
RETURNS (
    RESULT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE ROLESMENU_IS_CORRECT
RETURNS (
    NUMSEQ INTEGER,
    DCLNAME VARCHAR(50),
    IDENT INTEGER,
    ROLE_ID INTEGER,
    ROLE_NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE DCL_ACTIVE_USERS (
    AU_ID                   INTEGER NOT NULL,
    ACTIVE_USER_ID          INTEGER,
    ACTIVE_USER_HOST        VARCHAR(50),
    ACTIVE_USER_IP          VARCHAR(15),
    ACTIVE_USER_DCL_VER     VARCHAR(12),
    ACTIVE_USER_LOGIN_TIME  TIMESTAMP
);

CREATE TABLE DCL_GLOBAL_PARAMS (
    PARAM_ID        INTEGER NOT NULL,
    PARAM_CAPT      VARCHAR(80),
    PARAM_NAME      VARCHAR(80) NOT NULL,
    PARAM_VALUE     VARCHAR(255),
    PARAM_USERID    INTEGER,
    PROGRAMM_PARAM  SMALLINT
);

CREATE TABLE DCL_INI_PROFILES (
    INI_ID           INTEGER NOT NULL,
    INI_USER_ID      INTEGER,
    INI_DIALOG_NAME  VARCHAR(50),
    INI_TYPE         INTEGER DEFAULT 1,
    INI_PARAM_VALUE  BLOB SUB_TYPE 1 SEGMENT SIZE 2048
);

CREATE TABLE DCL_NOTIFYCATIONS (
    NOTIFY_ID      INTEGER NOT NULL,
    NOTIFY_TIME    TIMESTAMP,
    NOTIFY_ACTION  INTEGER,
    NOTIFY_STATE   INTEGER DEFAULT 0,
    USER_ID        INTEGER,
    NOTIFY_TEXT    VARCHAR(255),
    ADD_DATE       TIMESTAMP
);

CREATE TABLE DCL_ROLES (
    ROLESID           INTEGER NOT NULL,
    ROLENAME          VARCHAR(20),
    LONGROLENAME      VARCHAR(30),
    SHOWINLIST        SMALLINT,
    ROLE_ACCESSLEVEL  SMALLINT
);

CREATE TABLE DCL_ROLES_TO_USERS (
    RU_ID      INTEGER NOT NULL,
    RU_USERID  INTEGER,
    RU_ROLEID  INTEGER
);

CREATE TABLE DCL_ROLESMENU (
    ROLEID      INTEGER NOT NULL,
    MENUITEMID  INTEGER,
    RM_ID       INTEGER NOT NULL
);

CREATE TABLE DCL_SCRIPTS (
    NUMSEQ   INTEGER NOT NULL,
    DCLNAME  VARCHAR(50),
    DCLTEXT  BLOB SUB_TYPE 1 SEGMENT SIZE 80,
    COMMAND  VARCHAR(80),
    IDENT    INTEGER,
    PARENT   INTEGER,
    UPDATES  TIMESTAMP,
    ACTINON  CHAR(1)
);

CREATE TABLE DCL_TEMPLATES (
    TEID            INTEGER NOT NULL,
    TEMPL_NAME      VARCHAR(40) NOT NULL,
    TEMPL_DATA      BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    TEMPL_DATATYPE  INTEGER
);

CREATE TABLE DCL_USER_LOGIN_HISTORY (
    UL_ID           INTEGER NOT NULL,
    UL_USER_ID      INTEGER,
    UL_LOGIN_TIME   TIMESTAMP,
    UL_LOGOFF_TIME  TIMESTAMP,
    UL_HOST_NAME    VARCHAR(50),
    UL_HOST_IP      VARCHAR(15),
    UL_DCL_VER      VARCHAR(12)
);

CREATE TABLE DCL_USERS (
    UID                 INTEGER NOT NULL,
    DCL_USER_NAME       VARCHAR(20),
    DCL_LONG_USER_NAME  VARCHAR(30),
    DCL_USER_PASS       DM_PASSWORD,
    DCL_ROLE            INTEGER,
    SHOWINLIST          SMALLINT,
    ACCESSLEVEL         SMALLINT,
    DBUSER_NAME         VARCHAR(300),
    DBPASS              VARCHAR(40)
);

CREATE TABLE ORGANIZATIONS (
    OID       INTEGER NOT NULL,
    ORG_NAME  VARCHAR(101),
    ORD       SMALLINT,
    MAINORG   SMALLINT
);



/******************************************************************************/
/*                                   Views                                    */
/******************************************************************************/


/* View: ROLESTOMENU */
CREATE VIEW ROLESTOMENU(
    ROLEID,
    ROLENAME,
    LONGROLENAME,
    MENUITEMID,
    DCLNAME)
AS
select R.ROLESID ROLEID, R.ROLENAME, R.LONGROLENAME, RM.MENUITEMID, D.DCLNAME
from DCL_ROLESMENU RM, DCL_ROLES R, DCL_SCRIPTS D
where R.ROLESID = RM.ROLEID and
      RM.MENUITEMID = D.NUMSEQ
;



/* View: V_ATTACHMENTS */
CREATE VIEW V_ATTACHMENTS(
    MON$ATTACHMENT_ID,
    MON$SERVER_PID,
    MON$STATE,
    MON$ATTACHMENT_NAME,
    MON$USER,
    MON$ROLE,
    MON$REMOTE_PROTOCOL,
    MON$REMOTE_ADDRESS,
    MON$REMOTE_PID,
    MON$CHARACTER_SET_ID,
    MON$TIMESTAMP,
    MON$GARBAGE_COLLECTION,
    MON$REMOTE_PROCESS,
    MON$STAT_ID)
AS
select * from MON$ATTACHMENTS a
;




/******************************************************************************/
/*                             Unique Constraints                             */
/******************************************************************************/

ALTER TABLE DCL_GLOBAL_PARAMS ADD CONSTRAINT UNQ1_DCL_GLOBAL_PARAMS UNIQUE (PARAM_USERID, PARAM_NAME);
ALTER TABLE DCL_SCRIPTS ADD CONSTRAINT UNQ1_DCL_SCRIPTS UNIQUE (IDENT);


/******************************************************************************/
/*                                Primary Keys                                */
/******************************************************************************/

ALTER TABLE DCL_ACTIVE_USERS ADD CONSTRAINT PK_DCL_ACTIVE_USERS PRIMARY KEY (AU_ID);
ALTER TABLE DCL_GLOBAL_PARAMS ADD CONSTRAINT PK_DCL_GLOBAL_PARAMS PRIMARY KEY (PARAM_ID);
ALTER TABLE DCL_INI_PROFILES ADD CONSTRAINT PK_INI_PROFILES PRIMARY KEY (INI_ID);
ALTER TABLE DCL_NOTIFYCATIONS ADD CONSTRAINT PK_DCL_NOTIFYCATIONS PRIMARY KEY (NOTIFY_ID);
ALTER TABLE DCL_ROLES ADD CONSTRAINT PK_DCL_ROLES PRIMARY KEY (ROLESID);
ALTER TABLE DCL_ROLESMENU ADD CONSTRAINT PK_DCL_ROLESMENU PRIMARY KEY (RM_ID);
ALTER TABLE DCL_ROLES_TO_USERS ADD CONSTRAINT PK_DCL_ROLES_TO_USERS PRIMARY KEY (RU_ID);
ALTER TABLE DCL_SCRIPTS ADD CONSTRAINT PK_DCL_SCRIPTS PRIMARY KEY (NUMSEQ);
ALTER TABLE DCL_TEMPLATES ADD CONSTRAINT PK_DCL_TEMPLATES PRIMARY KEY (TEID);
ALTER TABLE DCL_USERS ADD CONSTRAINT PK_DCL_USERS PRIMARY KEY (UID);
ALTER TABLE DCL_USER_LOGIN_HISTORY ADD CONSTRAINT PK_DCL_USER_LOGIN_HISTORY PRIMARY KEY (UL_ID);
ALTER TABLE ORGANIZATIONS ADD CONSTRAINT PK_ORGANIZATIONS PRIMARY KEY (OID);


/******************************************************************************/
/*                                Foreign Keys                                */
/******************************************************************************/

ALTER TABLE DCL_ACTIVE_USERS ADD CONSTRAINT FK_DCL_ACTIVE_USERS_1 FOREIGN KEY (ACTIVE_USER_ID) REFERENCES DCL_USERS (UID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_INI_PROFILES ADD CONSTRAINT FK_DCL_INI_PROFILES_1 FOREIGN KEY (INI_USER_ID) REFERENCES DCL_USERS (UID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_NOTIFYCATIONS ADD CONSTRAINT FK_DCL_NOTIFYCATIONS_1 FOREIGN KEY (USER_ID) REFERENCES DCL_USERS (UID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_ROLESMENU ADD CONSTRAINT FK_DCL_ROLESMENU_1 FOREIGN KEY (MENUITEMID) REFERENCES DCL_SCRIPTS (NUMSEQ) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_ROLESMENU ADD CONSTRAINT FK_DCL_ROLESMENU_2 FOREIGN KEY (ROLEID) REFERENCES DCL_ROLES (ROLESID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_ROLES_TO_USERS ADD CONSTRAINT FK_DCL_ROLES_TO_USERS_1 FOREIGN KEY (RU_USERID) REFERENCES DCL_USERS (UID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_ROLES_TO_USERS ADD CONSTRAINT FK_DCL_ROLES_TO_USERS_2 FOREIGN KEY (RU_ROLEID) REFERENCES DCL_ROLES (ROLESID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_USERS ADD CONSTRAINT FK_DCL_USERS_1 FOREIGN KEY (DCL_ROLE) REFERENCES DCL_ROLES (ROLESID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE DCL_USER_LOGIN_HISTORY ADD CONSTRAINT FK_DCL_USER_LOGIN_HISTORY_1 FOREIGN KEY (UL_USER_ID) REFERENCES DCL_USERS (UID) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/*                                  Indices                                   */
/******************************************************************************/

CREATE INDEX DCL_ROLESMENU_IDX1 ON DCL_ROLESMENU (ROLEID, MENUITEMID);
CREATE INDEX DCL_SCRIPTS_IDX2 ON DCL_SCRIPTS (DCLNAME);
CREATE UNIQUE INDEX DCL_SCRIPTS_IDX3 ON DCL_SCRIPTS (IDENT, PARENT);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: DCL_ACTIVE_USERS_BI */
CREATE OR ALTER TRIGGER DCL_ACTIVE_USERS_BI FOR DCL_ACTIVE_USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.au_id is null) then
    new.au_id = gen_id(gen_dcl_active_users_id,1);
  if (inserting) then
    if (new.active_user_login_time is null) then
      new.active_user_login_time='now';
end
^

/* Trigger: DCL_GLOBAL_PARAMS_BI */
CREATE OR ALTER TRIGGER DCL_GLOBAL_PARAMS_BI FOR DCL_GLOBAL_PARAMS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.param_id is null) then
    new.param_id = gen_id(main_generator_id,1);
end
^

/* Trigger: DCL_NOTIFYCATIONS_BI0 */
CREATE OR ALTER TRIGGER DCL_NOTIFYCATIONS_BI0 FOR DCL_NOTIFYCATIONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.NOTIFY_ID is null) then
    new.NOTIFY_ID = gen_id(MAIN_GENERATOR_ID, 1);
  if (inserting) then
    new.add_date = 'now';
end
^

/* Trigger: DCL_ROLESMENU_BI */
CREATE OR ALTER TRIGGER DCL_ROLESMENU_BI FOR DCL_ROLESMENU
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.rm_id is null) then
    new.rm_id = gen_id(main_generator_id,1);
end
^

/* Trigger: DCL_ROLES_BI */
CREATE OR ALTER TRIGGER DCL_ROLES_BI FOR DCL_ROLES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.rolesid is null) then
    new.rolesid = gen_id(main_generator_id,1);
end
^

/* Trigger: DCL_ROLES_TO_USERS_BI */
CREATE OR ALTER TRIGGER DCL_ROLES_TO_USERS_BI FOR DCL_ROLES_TO_USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.ru_id is null) then
    new.ru_id = gen_id(main_generator_id,1);
end
^

/* Trigger: DCL_SCRIPTS_BI */
CREATE OR ALTER TRIGGER DCL_SCRIPTS_BI FOR DCL_SCRIPTS
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
as
begin
  if (new.NUMSEQ is null) then
    new.NUMSEQ = gen_id(DCL_SCRIPTS_NEXT_ID, 1);

  new.UPDATES = 'now';
  if (inserting) then
    new.ACTINON = 'I';
  if (updating) then
    new.ACTINON = 'U';
end
^

/* Trigger: DCL_TEMPLATES_BI */
CREATE OR ALTER TRIGGER DCL_TEMPLATES_BI FOR DCL_TEMPLATES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.teid is null) then
    new.teid = gen_id(main_generator_id,1);
end
^

/* Trigger: DCL_USERS_BI */
CREATE OR ALTER TRIGGER DCL_USERS_BI FOR DCL_USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.uid is null) then
    new.uid = gen_id(main_generator_id,1);
end
^

/* Trigger: DCL_USER_LOGIN_HISTORY_BI */
CREATE OR ALTER TRIGGER DCL_USER_LOGIN_HISTORY_BI FOR DCL_USER_LOGIN_HISTORY
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.UL_ID is null) then
    new.UL_ID = gen_id(GEN_DCL_USER_LOGIN_HISTORY_ID, 1);
end
^

/* Trigger: INI_PROFILES_BI */
CREATE OR ALTER TRIGGER INI_PROFILES_BI FOR DCL_INI_PROFILES
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.ini_id is null) then
    new.ini_id = gen_id(gen_ini_profiles_id,1);
end
^

/* Trigger: ORGANIZATIONS_AD0 */
CREATE OR ALTER TRIGGER ORGANIZATIONS_AD0 FOR ORGANIZATIONS
ACTIVE AFTER DELETE POSITION 0
as
begin
  if (deleting) then
    if (exists(select * from ORGANIZATIONS where MAINORG is null) and
        (select count(*) from ORGANIZATIONS) = 1) then
      update ORGANIZATIONS set MAINORG = 1;
end
^

/* Trigger: ORGANIZATIONS_BI */
CREATE OR ALTER TRIGGER ORGANIZATIONS_BI FOR ORGANIZATIONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.oid is null) then
    new.oid = gen_id(main_generator_id,1);
end
^

SET TERM ; ^



/******************************************************************************/
/*                             Stored Procedures                              */
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE ADD_MENU_ITEM_TO_ROLE (
    ROLEID INTEGER,
    MENUITEMID INTEGER)
RETURNS (
    ISAPPEND INTEGER)
AS
declare variable TMP1 integer;
begin
  select count(R.ROLEID)
  from DCL_ROLESMENU R
  where R.ROLEID = :ROLEID and
        R.MENUITEMID = :MENUITEMID
  into TMP1;
  if (:TMP1 = 0) then
  begin
    insert into DCL_ROLESMENU (ROLEID, MENUITEMID)
    values (:ROLEID, :MENUITEMID);
    ISAPPEND = 1;
    suspend;
  end
  else
  begin
    ISAPPEND = 0;
    suspend;
  end
end^


CREATE OR ALTER PROCEDURE COPY_ROLE (
    ROLEIDFROM INTEGER,
    ROLEIDTO INTEGER)
AS
begin
  insert into DCL_ROLESMENU(ROLEID, MENUITEMID)
  select :ROLEIDTO, MENUITEMID
  from DCL_ROLESMENU R
  where R.ROLEID = :ROLEIDFROM;
end^


CREATE OR ALTER PROCEDURE DEL_ROLE_AND_MENU (
    ROLEID INTEGER)
AS
begin
  delete from DCL_rolesmenu r where r.roleid=:roleid and r.roleid not in (select u1.dcl_role from dcl_users u1);
  Delete from DCL_roles r where r.rolesid=:roleid and r.rolesid not in (select u1.dcl_role from dcl_users u1);
end^


CREATE OR ALTER PROCEDURE DEL_ROLE_MENU (
    ROLEID INTEGER)
AS
begin
    delete from DCL_rolesmenu r where r.roleid=:roleid and r.roleid not in (select u1.dcl_role from dcl_users u1);
end^


CREATE OR ALTER PROCEDURE FIRST_DAY_OF_MONTH (
    ADATE DATE)
RETURNS (
    RESULT DATE)
AS
begin
if (:adate is null) then adate='now';
Result=ADate-EXTRACT(DAY FROM ADate) + 1;
  suspend;
end^


CREATE OR ALTER PROCEDURE IS_NUMBER (
    A_VALUE VARCHAR(32))
RETURNS (
    RESULT INTEGER)
AS
declare variable I integer;
declare variable J integer;
begin
  result = 0;
  a_value = trim(a_value);
  IF (a_value IS NULL OR char_length(a_value) = 0) then begin
    suspend;
    exit;
  end
  i = 1;
  j = CHAR_LENGTH(a_value);
  while (i <= j) do begin
    IF (substring(a_value FROM i FOR 1) BETWEEN '0' AND '9'
     OR (i =1 AND substring(a_value FROM 1 FOR 1) IN ('-', '+')
       AND CHAR_LENGTH(a_value) > 1 )) then
      result = 1;
    else begin
      result = 0;
      Break;
    end
    i = i + 1;
  end
  suspend;
end^


CREATE OR ALTER PROCEDURE ROLESMENU_IS_CORRECT
RETURNS (
    NUMSEQ INTEGER,
    DCLNAME CHAR(50),
    IDENT INTEGER,
    ROLE_ID INTEGER,
    ROLE_NAME VARCHAR(50))
AS
declare variable HEAD_EXISTS integer;
declare variable PARENT integer;
begin
for select r.rolesid, r.longrolename from DCL_roles r order by r.longrolename into :role_id, :role_name do
for select d.numseq, d.ident, d.parent from DCL_RolesMenu rm, DCL_Roles r, DCL_SCRIPTS d where r.rolesid=rm.roleid and rm.MENUITEMID=d.numseq and r.rolesid=:role_id into :numseq, :ident, :parent do
begin
    select count(*) from DCL_RolesMenu rm, DCL_Roles r, DCL_SCRIPTS d where r.rolesid=rm.roleid and rm.MENUITEMID=d.numseq and d.ident=:parent and r.rolesid=:role_id into :head_exists;
    if (:head_exists=0) then
    begin
        for select s.numseq, s.dclname, s.ident from DCL_scripts s where s.ident=:parent into :numseq, :dclname, :ident do suspend;
    end
end
end^



SET TERM ; ^
